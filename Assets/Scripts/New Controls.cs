//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/New Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""New Controls"",
    ""maps"": [
        {
            ""name"": ""ControllerPlayer"",
            ""id"": ""7865bf19-e050-4409-8f76-5766fe429847"",
            ""actions"": [
                {
                    ""name"": ""SpeedBoost"",
                    ""type"": ""Button"",
                    ""id"": ""426491f2-ee69-47b0-a487-c6124645988f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""f03a6a67-6b01-4747-a2c7-a244c8373180"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraMove"",
                    ""type"": ""Value"",
                    ""id"": ""296ed0ed-d668-44ab-beb8-d425460ac20d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ec72d7f2-62dd-4fc6-9458-5e1f9fd11bdf"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpeedBoost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6532a613-bda7-49c7-89bf-be5b7b3f5290"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7be0fc07-6ac8-4666-ba38-b23d6c90a9ce"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ControllerPlayer
        m_ControllerPlayer = asset.FindActionMap("ControllerPlayer", throwIfNotFound: true);
        m_ControllerPlayer_SpeedBoost = m_ControllerPlayer.FindAction("SpeedBoost", throwIfNotFound: true);
        m_ControllerPlayer_Move = m_ControllerPlayer.FindAction("Move", throwIfNotFound: true);
        m_ControllerPlayer_CameraMove = m_ControllerPlayer.FindAction("CameraMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ControllerPlayer
    private readonly InputActionMap m_ControllerPlayer;
    private IControllerPlayerActions m_ControllerPlayerActionsCallbackInterface;
    private readonly InputAction m_ControllerPlayer_SpeedBoost;
    private readonly InputAction m_ControllerPlayer_Move;
    private readonly InputAction m_ControllerPlayer_CameraMove;
    public struct ControllerPlayerActions
    {
        private @NewControls m_Wrapper;
        public ControllerPlayerActions(@NewControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SpeedBoost => m_Wrapper.m_ControllerPlayer_SpeedBoost;
        public InputAction @Move => m_Wrapper.m_ControllerPlayer_Move;
        public InputAction @CameraMove => m_Wrapper.m_ControllerPlayer_CameraMove;
        public InputActionMap Get() { return m_Wrapper.m_ControllerPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerPlayerActions set) { return set.Get(); }
        public void SetCallbacks(IControllerPlayerActions instance)
        {
            if (m_Wrapper.m_ControllerPlayerActionsCallbackInterface != null)
            {
                @SpeedBoost.started -= m_Wrapper.m_ControllerPlayerActionsCallbackInterface.OnSpeedBoost;
                @SpeedBoost.performed -= m_Wrapper.m_ControllerPlayerActionsCallbackInterface.OnSpeedBoost;
                @SpeedBoost.canceled -= m_Wrapper.m_ControllerPlayerActionsCallbackInterface.OnSpeedBoost;
                @Move.started -= m_Wrapper.m_ControllerPlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_ControllerPlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_ControllerPlayerActionsCallbackInterface.OnMove;
                @CameraMove.started -= m_Wrapper.m_ControllerPlayerActionsCallbackInterface.OnCameraMove;
                @CameraMove.performed -= m_Wrapper.m_ControllerPlayerActionsCallbackInterface.OnCameraMove;
                @CameraMove.canceled -= m_Wrapper.m_ControllerPlayerActionsCallbackInterface.OnCameraMove;
            }
            m_Wrapper.m_ControllerPlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SpeedBoost.started += instance.OnSpeedBoost;
                @SpeedBoost.performed += instance.OnSpeedBoost;
                @SpeedBoost.canceled += instance.OnSpeedBoost;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @CameraMove.started += instance.OnCameraMove;
                @CameraMove.performed += instance.OnCameraMove;
                @CameraMove.canceled += instance.OnCameraMove;
            }
        }
    }
    public ControllerPlayerActions @ControllerPlayer => new ControllerPlayerActions(this);
    public interface IControllerPlayerActions
    {
        void OnSpeedBoost(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnCameraMove(InputAction.CallbackContext context);
    }
}
